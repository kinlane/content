---
layout: post
title: 'Twitter API Integration Math: Streaming API'
---
<p><img src="http://kinlane-productions.s3.amazonaws.com/twitter/twitter-bird-blue-on-white.png" alt="" width="200" align="right" /></p>
<p>I&rsquo;m continuing my blog series on using the Twitter API for my new API ranking and monitoring platform.  To begin, I did the <a title="necessary to understand how I needed to use the Twitter API " href="http://apivoice.com/2012/06/05/doing-the-twitter-api-integration-math/">math necessary to understand how I needed to use the Twitter API</a> for my project.  Next, using the <a title="Twitter REST API" href="http://apivoice.com/2012/06/06/twitter-api-integration-math-rest-api/">Twitter REST API,</a> I tried to accomplish what I needed, quickly realizing the API rate limits would quickly prevent me from getting all the Tweets I needed.</p>
<p>Next up, the <a title="Twitter Streaming API" href="https://dev.twitter.com/docs/streaming-apis">Twitter Streaming API</a>.  The Twitter Streaming API give developers low latency, persistent access to Twitter's global stream of Tweet data, allowing Tweets to be pushed in real-time, without any of the overhead associated with polling a REST endpoint.  The streaming API has a technical learning curve above the REST API, but I used a PHP client library called <a title="Phirehose" href="https://github.com/fennb/phirehose">Phirehose</a>, which made getting up and running very easy.</p>
<p>The Twitter Streaming API provides three types of streams:</p>
<ul class="mainlist">
<li><strong><a title="Public Streams" href="https://dev.twitter.com/docs/streaming-apis/streams/public">Public Streams</a> -</strong> Streams of the public data flowing through Twitter. Suitable for following specific users or topics, and data mining</li>
<li><strong><a title="User Streams" href="https://dev.twitter.com/docs/streaming-apis/streams/user">User Streams</a> -</strong> Single-user streams, containing roughly all of the data corresponding with a single user's view of Twitter</li>
<li><strong><a href="https://dev.twitter.com/docs/streaming-apis/streams/site">Site Streams</a> -</strong> The multi-user version of user streams. Site streams are intended for servers which must connect to Twitter on behalf of many users</li>
</ul>
<p>For the purposes of my API ranking and monitoring platform I&rsquo;m just using public streams.  Using Phirehose I was able to set two types of connections with the Twitter Streaming API:</p>
<ul class="mainlist">
<li><strong>setTrack() - </strong>Track on specific keywords, #hashtags and @mentions</li>
<li><strong>setFollow() -</strong> Follow specific Twitter users, getting all their Tweets</li>
</ul>
<p>After going through all 6000+ of the APIs in the <a title="ProgrammableWeb Directory" href="http://www.programmableweb.com/apis/directory">ProgrammableWeb directory</a>, I have 1374 total Twitter accounts that I can follow and get mentions for.  However to really dial-in my API monitoring and ranking system I&rsquo;m going to focus in on 381 of what I consider to be the grade A and B APIs, for now.</p>
<p>With this in mind, I setup my Twitter API filters to track on 450 keywords, #hashtags and @mentions and directly follow the Twitter accounts of 381 APIs.  After initiating a persistent connection with the streaming API, the Tweets begin to flow in.  Its averaging about 400 Tweets per second at this track and follow volume.  When I cranked it up to 1000 Twitter accounts, it wouldn&rsquo;t reliably maintain a connection.  I can&rsquo;t tell if its technical on my end or a limitation on Twitter&rsquo;s end.  I will diagnose further in the future.</p>
<p><img style="padding: 15px;" src="http://kinlane-productions.s3.amazonaws.com/streaming-matrix.jpg" alt="" width="250" align="right" /></p>
<p>The Twitter Streaming API appears to give me what I need to pull in the Tweets necessary for my API ranking and monitoring, I still need to figure out if scaling the volume actually goes beyond the 1% volume limitation imposed by Twitter on the streaming API.  Its really hard to tell.  While the Twitter Streaming API is great for pulling these Tweets in real-time, it can only be applied for the "<span style="text-decoration: underline;">real-time now</span>", not the past.  Once a moment passes and if I didn&rsquo;t capture a Tweet either because it wasn&rsquo;t defined in my filters or because the connection dropped, I have to use the Twitter REST API to retrieve it--putting me back in square one with the limitations of the REST API.</p>
<p>In my next post I will talk about how I have to reconcile between the Twitter Streaming and REST APIs to make sure I got all the Tweets I need, then I will explore the other options provided to me by Twitter reseller partners Gnip and Datasift, then I will summarize what I&rsquo;ve learned throughout this process.</p>