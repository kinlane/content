---
layout: post
title: 'Lack of Cloud Awareness Impacted Twitters Perspective, Setting Bad Tone for How It Deals With Ecosystem'
---
<p><img style="padding: 15px;" src="https://s3.amazonaws.com/kinlane-productions/black-cloud.jpg" alt="" width="250" align="right" /></p>
<p>I just listened <a title="The Clouds" href="https://soundcloud.com/bwalker/cloud1">The Clouds</a>, by Benjamen Walker on <a title="SoundCloud" href="http://soundcloud.com">SoundCloud</a>. In this episode a Twitter employee named Britt Selvitelle talks about what happened when Justin Bieber joined Twitter in 2009 and how everything had changed by the time the Bieber joined Instagram in 2011.</p>
<p>According to the story, when Bieber joined Twitter it was all hands on deck and they were in panic mode because of the demand it put on their infrastructure, but when Bieber joined Instagram in 2011, the situation was dfferent because Instagram ran on the AWS cloud.  Selvitelle from Twitter even jokes about how, when he ran into Instagram founder Mike Krieger at a party and mentioned it, he fully expected it to have been a nightmare for them as well.</p>
<p>Selvitelle admits having "missed" the cloud revolution because he was heads down at Twitter.  I can't help but think, how their approach to their infrastructure, the lack of awareness regarding the cloud and their fire drill approach to times when their infrastructure is slammed, ultimately set the tone for their <a href="http://apivoice.com/2012/06/29/twitter-continues-to-restrict-access-to-our-tweets/">decisions to rate limit</a>, and established the beginning of their defensive stance against developers in the ecosystem.</p>
<p>I feel that Twitter "honestly" started using rate limits as logical defense against infrastructure overload, but it has caused such a backlash and negative response in the community, it polarized Twitter against its own developers--pushing them to a permanent stance where they are perpetually at odds with their own developer ecosystem.</p>
<p>If Twitter had the comfort of more elasticity in their infrastructure, it would have meant less downtime, and they may never had needed to rate limit in the way they did, which now has become a way of life and is permanently imprinted on developer's perspective of Twitter.</p>
<p>Its easy to argue that in 2009, AWS wasn't quite there yet. I would argue differently. I was scaling AWS servers to run SAP events in 2009, although, it was a un uphill battle to get budget approval and the necessary support I needed to run production stuff in AWS back then.  But by 2011, I'm sorry this argument doesn't hold water.  One can argue that core Twitter infrastructure needs its own data center, but there is no reason that overflow could oreperate in the cloud in 2010 and 2011.</p>
<p>Both 2010, 2011 were the critical years in which ireversable damage was done to the Twitter ecosystem. I can't help but think that their lack of awareness of the cloud, led to rate limiting the API, without the <a href="http://apievangelist.com/2012/05/31/provide-release-valves-for-api-rate-limits/">proper relief valves</a>--which in term lead to a developer revolt, and has unknowingly set a really bad tone to the overall conversation in the Twitter ecosystem that persists today.</p>
<p>I guess all I'm saying, is that having a wide awareness of emerging technologies is important to driving sensible IT decisions within your organization, and the elasticity of the cloud can have some very empowering effects on the way you make business decisions for your platform, API and apps--in a way that could seriously impact the future of your company.</p>