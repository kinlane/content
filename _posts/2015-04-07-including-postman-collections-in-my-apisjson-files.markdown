---
layout: post
title: 'Including Postman Collections In My APIs.json Files'
---
<p><img style="padding: 10px;" src="https://s3.amazonaws.com/kinlane-productions/api-evangelist/postman/apis-json-postman.png" alt="" width="250" align="right" /></p>
<p>I&rsquo;m back doing more work on the&nbsp;<a href="https://kin-lane.github.io/master/">master stack of microservices</a>&nbsp;that I use to operate <a href="http://apievangelist.com">API Evangelist</a>. Things were getting critical, as I needed some new features, and since I had put a moratorium on the legacy stack, in order to get the new stuff I wanted, I had to finish the migration for any API I wanted to work on&mdash;I&rsquo;m currently about 70% complete with it all.</p>
<p>One of the features I added to my "API microservice" (yes I went there), which is my microservice for tracking on APIs across the sector, was a set of Swagger import / export endpoints. I wanted a quick way to import Swagger to represent any API, and then easily get an updated version of Swagger out of the system as well, so I added two endpoints:</p>
<ul>
<li><strong>Swagger 2.0 Import (POST) - </strong>Ability to pass a public URL for a Swagger definition, and it will import into my main database.</li>
<li><strong>Swagger 2.0 Export (GET) -</strong> Ability to request a fresh Swagger specification for any API I am tracking on, and profiled.</li>
</ul>
<p>I had Swagger import and export features in my old system, but they weren&rsquo;t clean API endpoints, just custom hacks. Once complete, the next thing on my task list is to generate <a href="https://www.getpostman.com/docs/collections">Postman Collections</a> for the entire stack. I need to be able to monitor my microservices stack with services like <a href="http://bit.ly/1rg9WQk">API Science</a> and <a href="http://bit.ly/1rgh3wM">Runscope</a>, and Postman Collections are the common API transaction language, both of these platforms speak. There is one snag, in order to get the Postman Collection, I need my entire stack available in Postman, and I&rsquo;m sure as hell not manually entering all of them, so I need Swagger 1.2 definitions to be able to be able to automate this. <a href="https://github.com/a85/POSTMan-Chrome-Extension/issues/843">Postman recently said they support Swagger 2.0</a>, but I haven&rsquo;t been able to get any to work, so Swagger 1.2 it is. So I launched two additional API endpoints:</p>
<ul>
<li><strong>Swagger 1.2 Import (POST) - </strong>Ability to pass a public URL for a Swagger definition, and it will import into my main database.</li>
<li><strong>Swagger 1.2 Export (GET) -</strong> Ability to request a fresh Swagger specification for any API I am tracking on, and profiled.</li>
</ul>
<p>Now that I have the ability to export a Swagger 1.2 or 2.0 definition out of my API microservice, I quickly generated Swagger 1.2 definitions for almost half of my services. I was able to easily important these into <a href="https://www.getpostman.com/">Postman</a>, and then publish Postman Collections for each set of microservices, and save a copy, which I store in the Github repository for each microservices.</p>
<p>Now that I have a locally available Postman Collection for each API, I added them to the APIs.json, using an x-postman URL type. <a href="https://kin-lane.github.io/api/">You can see an icon alongside the Swagger definition</a>, in the APIs.json navigator for each project. Now I have two common formats for describing my APIs, and putting them easily to work via Swagger UI or in a Postman Client. Next step is to import all the generated Postman Collections into API Science and Runscope, to setup up a monitoring layer for the stack. Depending on what public assets are available for me via these services, I will be added more service specific links in APIs.json, like I did for Postman.</p>
<p>My goal is to show the potential for APIs.json as an engine that serves every stop along the API lifecycle.</p>